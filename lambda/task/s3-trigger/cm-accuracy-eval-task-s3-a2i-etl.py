'''
Lambda function triggered by S3 event: A2I generated new file to the output folder
1. Parse detail table name from the S3 Key - the A2I store JSON using the workflow name as the folder name. With a prefix defined in the constants (enironment variable)
2. Read the JSON file generated by A2I; get image S3 URI and human review from the JSON.
3. Get Rekognition output from the moderation detail table (name from step 1)
4. Compare A2I human input (step 2) and Rek result (step 3), mark them as FP or TP; And save the result to DB - moderation detail table.
5. Calculate task status: by counting numbers of images labeled and reviewed
6,7. Get the task entry from DB, compare if the status changed, if so save the status to DB
'''
import json
import urllib.parse
import boto3
import os

DYNAMODB_TABLE_PREFIX = os.environ["DYNAMODB_TABLE_PREFIX"]
DYNAMO_TASK_TABLE = os.environ["DYNAMODB_TASK_TABLE"]
DYNAMO_INDEX_NAME = os.environ["DYNAMODB_INDEX_NAME"]

s3 = boto3.client('s3')
dynamodb = boto3.client('dynamodb')

def lambda_handler(event, context):
    # Get the object from the event and show its content type
    bucket = event['Records'][0]['s3']['bucket']['name']
    key = urllib.parse.unquote_plus(event['Records'][0]['s3']['object']['key'], encoding='utf-8')

    dynamodb_name = ''
    # Get flow folder name as the DynamoDB name
    for a in key.split('/'):
        if a.startswith(DYNAMODB_TABLE_PREFIX):
            dynamodb_name = a
            break
    print("1. parse dynamoDB detail table name from URL",dynamodb_name)
    
    try:
        # Get A2I generated JSON with human review result
        response = s3.get_object(Bucket=bucket, Key=key)
        a2i = json.loads(response["Body"].read().decode('utf-8'))
        
        # Get image s3 path from A2I JSON
        img_bucket = a2i["inputContent"]["aiServiceRequest"]["image"]["s3Object"]["bucket"]
        img_key = a2i["inputContent"]["aiServiceRequest"]["image"]["s3Object"]["name"]
        print ("2. get image S3 URL",f's3://{img_bucket}/{img_key}')
        
        # Get entry from dynamoDB
        print(f'!!!!!s3://{img_bucket}/{img_key}', dynamodb_name)
        try:
            db_response = dynamodb.get_item(
                TableName = dynamodb_name,
                Key = {'file_path': {'S': f's3://{img_bucket}/{img_key}'}} 
            )       
            print ("3. get moderation detail entry from DB", db_response)
        except Exception as ex:
            print ("3. failed to get moderation detail entry from DB", ex)
            return False
            
        # Match human review with DB record and update review result to DB
        if db_response['Item']['issue_flag']['N'] == "1":
            db_response['Item']['reviewed_flag'] = {'N': "1"}
            for rek in db_response['Item']['rek_results']['L']:
                review_result = check_a2i(a2i, rek['M']['category']['S'], rek['M']['parent_category']['S'])
                rek['M']['review_result'] = {'S': review_result}
                
                # additional attributes for report
                if review_result == 'true-positive':
                    db_response['Item']['tp_flag'] = {'N': "1"}
                elif review_result == 'false-positive':
                    db_response['Item']['fp_flag'] = {'N': "1"}
        
            # Save review result back to DynamoDB
            put_response = dynamodb.put_item(
                TableName = dynamodb_name,
                Item = db_response['Item']
            )
            print ("4. analysis accuracy using both Rek and A2I outputs: ", put_response)

        # Check task status
        status = get_task_status(dynamodb_name)
        print ("5. calculate task status by counting moderation entries: ", status)
        
        print("Get task status:", status)
        if status is not None:
            # Update DB task table with the new task status
            # Get task item from DB table
            d_response = dynamodb.get_item(
                TableName=DYNAMO_TASK_TABLE,
                Key={"id" : { "S": dynamodb_name.replace(DYNAMODB_TABLE_PREFIX, '')}}
            )    
            item = d_response.get("Item")
            print ("6. Get task entry from DB: ", item)
            if item is not None and item["status"]["S"] != status:
                # Update DB
                item["status"]["S"] = status
                d_response = dynamodb.put_item(
                    TableName=DYNAMO_TASK_TABLE,
                    Item=item,
                )
                print ("7. Updated task in DB: ", item)
   
    except Exception as e:
        print(e)
        raise e

    return True

def check_a2i(a2i, category_name, parent_category_name):
    found = False
    for l in a2i["humanAnswers"][0]["answerContent"]["AWS/Rekognition/DetectModerationLabels/Image/V3"]["moderationLabels"]:
        if l["name"] == category_name and l["parentName"] == parent_category_name:
            found = True
            break

    review_result = 'false-positive'
    if found:
        review_result = 'true-positive'

    return review_result

def get_task_status(result_table):
    task_status = None
    labeled, reviewed = get_metrics(result_table)
    #print("!!! labeled:", labeled, ", reviewed", reviewed)
    if labeled > 0:
        if reviewed == 1 and labeled > 1:
            # Set status to "HUMAN_REVIEWING" when reviewed == 0 (this is the first review of the task)
            task_status = "HUMAN_REVIEWING"
        elif reviewed == labeled: # Last to review 
            task_status = "COMPLETED"

    return task_status
    
def get_metrics(result_table):
    # Scan result table: issued images
    labeled, reviewed, fp, fn, tp, tn = 0, 0, 0, 0, 0, 0
    d_response = dynamodb.query(
        TableName=result_table,
        IndexName=DYNAMO_INDEX_NAME,
        KeyConditionExpression='issue_flag = :i',
        ExpressionAttributeValues={
            ':i': {'N': '1'}
        }
    )
    labeled, reviewed = count_flags(d_response["Items"], labeled, reviewed)
    last_key = d_response.get("LastEvaluatedKey")
    if last_key is not None:
        while last_key is not None:
            d_response = dynamodb.query(
                TableName=result_table,
                IndexName=DYNAMO_INDEX_NAME,
                KeyConditionExpression='issue_flag = :i',
                ExpressionAttributeValues={
                    ':i': {'N': '1'}
                },
                ExclusiveStartKey=last_key
            )
            last_key = d_response.get("LastEvaluatedKey")
            labeled, reviewed = count_flags(d_response["Items"], labeled, reviewed)

    return labeled, reviewed

def count_flags(items, labeled, reviewed):
    labeled += len(items)
    for i in items:
        if i["reviewed_flag"]["N"] == "1":
            reviewed += 1
    return labeled, reviewed