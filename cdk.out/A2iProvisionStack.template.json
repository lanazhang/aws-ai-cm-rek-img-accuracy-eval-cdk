{
 "Parameters": {
  "userEmails": {
   "Type": "String",
   "Default": "lanaz@amazon.com",
   "Description": "The emails for users to log in to the website and A2I. Split by a comma if multiple. You can always add new users after the system is deployed."
  },
  "BootstrapVersion": {
   "Type": "AWS::SSM::Parameter::Value<String>",
   "Default": "/cdk-bootstrap/hnb659fds/version",
   "Description": "Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]"
  }
 },
 "Resources": {
  "cmevalbucketECC5BB74": {
   "Type": "AWS::S3::Bucket",
   "Properties": {
    "BucketName": "cm-accuracy-eval-122702569249-us-east-1-74fb0",
    "CorsConfiguration": {
     "CorsRules": [
      {
       "AllowedHeaders": [
        "*"
       ],
       "AllowedMethods": [
        "GET"
       ],
       "AllowedOrigins": [
        "*"
       ]
      }
     ]
    }
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete",
   "Metadata": {
    "aws:cdk:path": "A2iProvisionStack/cm-eval-bucket/Resource"
   }
  },
  "cmevalbucketNotifications823FA244": {
   "Type": "Custom::S3BucketNotifications",
   "Properties": {
    "ServiceToken": {
     "Fn::GetAtt": [
      "BucketNotificationsHandler050a0587b7544547bf325f094a3db8347ECC3691",
      "Arn"
     ]
    },
    "BucketName": {
     "Ref": "cmevalbucketECC5BB74"
    },
    "NotificationConfiguration": {
     "LambdaFunctionConfigurations": [
      {
       "Events": [
        "s3:ObjectCreated:*"
       ],
       "Filter": {
        "Key": {
         "FilterRules": [
          {
           "Name": "suffix",
           "Value": ".json"
          },
          {
           "Name": "prefix",
           "Value": "a2i/"
          }
         ]
        }
       },
       "LambdaFunctionArn": {
        "Fn::GetAtt": [
         "s3triggerCE04A23F",
         "Arn"
        ]
       }
      }
     ]
    },
    "Managed": true
   },
   "DependsOn": [
    "cmevalbucketAllowBucketNotificationsToA2iProvisionStacks3triggerED4772943322068B"
   ],
   "Metadata": {
    "aws:cdk:path": "A2iProvisionStack/cm-eval-bucket/Notifications/Resource"
   }
  },
  "cmevalbucketAllowBucketNotificationsToA2iProvisionStacks3triggerED4772943322068B": {
   "Type": "AWS::Lambda::Permission",
   "Properties": {
    "Action": "lambda:InvokeFunction",
    "FunctionName": {
     "Fn::GetAtt": [
      "s3triggerCE04A23F",
      "Arn"
     ]
    },
    "Principal": "s3.amazonaws.com",
    "SourceAccount": "122702569249",
    "SourceArn": {
     "Fn::GetAtt": [
      "cmevalbucketECC5BB74",
      "Arn"
     ]
    }
   },
   "Metadata": {
    "aws:cdk:path": "A2iProvisionStack/cm-eval-bucket/AllowBucketNotificationsToA2iProvisionStacks3triggerED477294"
   }
  },
  "lambdas3triggerrole97669368": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    }
   },
   "Metadata": {
    "aws:cdk:path": "A2iProvisionStack/lambda-s3-trigger-role/Resource"
   }
  },
  "lambdas3triggerroleDefaultPolicy64081BD6": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": [
        "dynamodb:*",
        "s3:*"
       ],
       "Effect": "Allow",
       "Resource": "*"
      },
      {
       "Action": [
        "logs:CreateLogGroup",
        "logs:CreateLogStream",
        "logs:PutLogEvents"
       ],
       "Effect": "Allow",
       "Resource": "arn:aws:logs:us-east-1:122702569249:*"
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "lambdas3triggerroleDefaultPolicy64081BD6",
    "Roles": [
     {
      "Ref": "lambdas3triggerrole97669368"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "A2iProvisionStack/lambda-s3-trigger-role/DefaultPolicy/Resource"
   }
  },
  "s3triggerCE04A23F": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Code": {
     "S3Bucket": "cdk-hnb659fds-assets-122702569249-us-east-1",
     "S3Key": "b43331c62a4435e9983bdefcc651cd8233c41db4af815de35737e1c2ae72eac1.zip"
    },
    "Role": {
     "Fn::GetAtt": [
      "lambdas3triggerrole97669368",
      "Arn"
     ]
    },
    "Environment": {
     "Variables": {
      "DYNAMODB_TABLE_PREFIX": "cm-accuracy--74fb0",
      "DYNAMODB_TASK_TABLE": "cm-accuracy-eval-task-74fb0",
      "DYNAMODB_INDEX_NAME": "issue_flag-index"
     }
    },
    "FunctionName": "cm-accuracy-eval-task-s3-a2i-etl-74fb0",
    "Handler": "cm-accuracy-eval-task-s3-a2i-etl.lambda_handler",
    "MemorySize": 5120,
    "Runtime": "python3.9",
    "Timeout": 30
   },
   "DependsOn": [
    "lambdas3triggerroleDefaultPolicy64081BD6",
    "lambdas3triggerrole97669368"
   ],
   "Metadata": {
    "aws:cdk:path": "A2iProvisionStack/s3-trigger/Resource",
    "aws:asset:path": "asset.b43331c62a4435e9983bdefcc651cd8233c41db4af815de35737e1c2ae72eac1",
    "aws:asset:is-bundled": false,
    "aws:asset:property": "Code"
   }
  },
  "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "ManagedPolicyArns": [
     {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
       ]
      ]
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "A2iProvisionStack/BucketNotificationsHandler050a0587b7544547bf325f094a3db834/Role/Resource"
   }
  },
  "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleDefaultPolicy2CF63D36": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": "s3:PutBucketNotification",
       "Effect": "Allow",
       "Resource": "*"
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleDefaultPolicy2CF63D36",
    "Roles": [
     {
      "Ref": "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "A2iProvisionStack/BucketNotificationsHandler050a0587b7544547bf325f094a3db834/Role/DefaultPolicy/Resource"
   }
  },
  "BucketNotificationsHandler050a0587b7544547bf325f094a3db8347ECC3691": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Description": "AWS CloudFormation handler for \"Custom::S3BucketNotifications\" resources (@aws-cdk/aws-s3)",
    "Code": {
     "ZipFile": "import boto3  # type: ignore\nimport json\nimport logging\nimport urllib.request\n\ns3 = boto3.client(\"s3\")\n\nEVENTBRIDGE_CONFIGURATION = 'EventBridgeConfiguration'\n\nCONFIGURATION_TYPES = [\"TopicConfigurations\", \"QueueConfigurations\", \"LambdaFunctionConfigurations\"]\n\ndef handler(event: dict, context):\n  response_status = \"SUCCESS\"\n  error_message = \"\"\n  try:\n    props = event[\"ResourceProperties\"]\n    bucket = props[\"BucketName\"]\n    notification_configuration = props[\"NotificationConfiguration\"]\n    request_type = event[\"RequestType\"]\n    managed = props.get('Managed', 'true').lower() == 'true'\n    stack_id = event['StackId']\n\n    if managed:\n      config = handle_managed(request_type, notification_configuration)\n    else:\n      config = handle_unmanaged(bucket, stack_id, request_type, notification_configuration)\n\n    put_bucket_notification_configuration(bucket, config)\n  except Exception as e:\n    logging.exception(\"Failed to put bucket notification configuration\")\n    response_status = \"FAILED\"\n    error_message = f\"Error: {str(e)}. \"\n  finally:\n    submit_response(event, context, response_status, error_message)\n\ndef handle_managed(request_type, notification_configuration):\n  if request_type == 'Delete':\n    return {}\n  return notification_configuration\n\ndef handle_unmanaged(bucket, stack_id, request_type, notification_configuration):\n  external_notifications = find_external_notifications(bucket, stack_id)\n\n  if request_type == 'Delete':\n    return external_notifications\n\n  def with_id(notification):\n    notification['Id'] = f\"{stack_id}-{hash(json.dumps(notification, sort_keys=True))}\"\n    return notification\n\n  notifications = {}\n  for t in CONFIGURATION_TYPES:\n    external = external_notifications.get(t, [])\n    incoming = [with_id(n) for n in notification_configuration.get(t, [])]\n    notifications[t] = external + incoming\n\n  if EVENTBRIDGE_CONFIGURATION in notification_configuration:\n    notifications[EVENTBRIDGE_CONFIGURATION] = notification_configuration[EVENTBRIDGE_CONFIGURATION]\n  elif EVENTBRIDGE_CONFIGURATION in external_notifications:\n    notifications[EVENTBRIDGE_CONFIGURATION] = external_notifications[EVENTBRIDGE_CONFIGURATION]\n\n  return notifications\n\ndef find_external_notifications(bucket, stack_id):\n  existing_notifications = get_bucket_notification_configuration(bucket)\n  external_notifications = {}\n  for t in CONFIGURATION_TYPES:\n    external_notifications[t] = [n for n in existing_notifications.get(t, []) if not n['Id'].startswith(f\"{stack_id}-\")]\n\n  if EVENTBRIDGE_CONFIGURATION in existing_notifications:\n    external_notifications[EVENTBRIDGE_CONFIGURATION] = existing_notifications[EVENTBRIDGE_CONFIGURATION]\n\n  return external_notifications\n\ndef get_bucket_notification_configuration(bucket):\n  return s3.get_bucket_notification_configuration(Bucket=bucket)\n\ndef put_bucket_notification_configuration(bucket, notification_configuration):\n  s3.put_bucket_notification_configuration(Bucket=bucket, NotificationConfiguration=notification_configuration)\n\ndef submit_response(event: dict, context, response_status: str, error_message: str):\n  response_body = json.dumps(\n    {\n      \"Status\": response_status,\n      \"Reason\": f\"{error_message}See the details in CloudWatch Log Stream: {context.log_stream_name}\",\n      \"PhysicalResourceId\": event.get(\"PhysicalResourceId\") or event[\"LogicalResourceId\"],\n      \"StackId\": event[\"StackId\"],\n      \"RequestId\": event[\"RequestId\"],\n      \"LogicalResourceId\": event[\"LogicalResourceId\"],\n      \"NoEcho\": False,\n    }\n  ).encode(\"utf-8\")\n  headers = {\"content-type\": \"\", \"content-length\": str(len(response_body))}\n  try:\n    req = urllib.request.Request(url=event[\"ResponseURL\"], headers=headers, data=response_body, method=\"PUT\")\n    with urllib.request.urlopen(req) as response:\n      print(response.read().decode(\"utf-8\"))\n    print(\"Status code: \" + response.reason)\n  except Exception as e:\n      print(\"send(..) failed executing request.urlopen(..): \" + str(e))\n"
    },
    "Handler": "index.handler",
    "Role": {
     "Fn::GetAtt": [
      "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC",
      "Arn"
     ]
    },
    "Runtime": "python3.9",
    "Timeout": 300
   },
   "DependsOn": [
    "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleDefaultPolicy2CF63D36",
    "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC"
   ],
   "Metadata": {
    "aws:cdk:path": "A2iProvisionStack/BucketNotificationsHandler050a0587b7544547bf325f094a3db834/Resource"
   }
  },
  "lambdaprovisionrole558E8138": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    }
   },
   "Metadata": {
    "aws:cdk:path": "A2iProvisionStack/lambda-provision-role/Resource"
   }
  },
  "lambdaprovisionroleDefaultPolicyC934A2D7": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": [
        "cognito-idp:*",
        "cognito:*",
        "lambda:InvokeFunction",
        "s3:*",
        "sagemaker:*FlowDefinition",
        "sagemaker:*HumanLoop*",
        "sagemaker:*HumanTaskUi*",
        "sagemaker:*Workforce*",
        "sagemaker:*Workteam*"
       ],
       "Effect": "Allow",
       "Resource": "*"
      },
      {
       "Action": "iam:PassRole",
       "Condition": {
        "StringEquals": {
         "iam:PassedToService": "sagemaker.amazonaws.com"
        }
       },
       "Effect": "Allow",
       "Resource": "*"
      },
      {
       "Action": [
        "logs:CreateLogGroup",
        "logs:CreateLogStream",
        "logs:PutLogEvents"
       ],
       "Effect": "Allow",
       "Resource": "arn:aws:logs:us-east-1:122702569249:*"
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "lambdaprovisionroleDefaultPolicyC934A2D7",
    "Roles": [
     {
      "Ref": "lambdaprovisionrole558E8138"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "A2iProvisionStack/lambda-provision-role/DefaultPolicy/Resource"
   }
  },
  "provisioncustomresource4A073CEE": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Code": {
     "S3Bucket": "cdk-hnb659fds-assets-122702569249-us-east-1",
     "S3Key": "5a193bccd4ff3050d1699a360ec6dc23ce3935c635b05470c824985f1de61a32.zip"
    },
    "Role": {
     "Fn::GetAtt": [
      "lambdaprovisionrole558E8138",
      "Arn"
     ]
    },
    "Environment": {
     "Variables": {
      "HUMAN_TASK_UI_NAME": "cm-accuracy-eval-image-review-ui-template-74fb0",
      "COGNITO_USER_EMAILS": {
       "Ref": "userEmails"
      },
      "WORKFORCE_NAME": "cm-accuracy-eval-workforce-74fb0",
      "WORKTEAM_NAME": "cm-accuracy-eval-workteam-74fb0",
      "COGNITO_USER_POOL_NAME": "cm-accuracy-eval-user-pool-74fb0",
      "COGNITO_CLIENT_NAME": "web-client-74fb0",
      "COGNITO_GROUP_NAME": "admin-74fb0",
      "COGNITO_USER_POOL_DOMAIN": "accuracy-eval-74fb0",
      "S3_BUCKET_NAME": {
       "Ref": "cmevalbucketECC5BB74"
      },
      "S3_BUCKET_TEMP_FILE_KEY": ".cfn_temp/a2i.json"
     }
    },
    "FunctionName": "cm-accuracy-eval-provision-custom-resource-74fb0",
    "Handler": "cm-accuracy-eval-provision-custom-resource.on_event",
    "MemorySize": 512,
    "Runtime": "python3.9",
    "Timeout": 60
   },
   "DependsOn": [
    "lambdaprovisionroleDefaultPolicyC934A2D7",
    "lambdaprovisionrole558E8138"
   ],
   "Metadata": {
    "aws:cdk:path": "A2iProvisionStack/provision-custom-resource/Resource",
    "aws:asset:path": "asset.5a193bccd4ff3050d1699a360ec6dc23ce3935c635b05470c824985f1de61a32",
    "aws:asset:is-bundled": false,
    "aws:asset:property": "Code"
   }
  },
  "lambdacustomreslambdarole4DD61267": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    }
   },
   "Metadata": {
    "aws:cdk:path": "A2iProvisionStack/lambda-custom-res-lambda-role/Resource"
   }
  },
  "lambdacustomreslambdaroleDefaultPolicy3F0F5737": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": [
        "logs:CreateLogGroup",
        "logs:CreateLogStream",
        "logs:PutLogEvents"
       ],
       "Effect": "Allow",
       "Resource": "arn:aws:logs:us-east-1:122702569249:*"
      },
      {
       "Action": "lambda:InvokeFunction",
       "Effect": "Allow",
       "Resource": "*"
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "lambdacustomreslambdaroleDefaultPolicy3F0F5737",
    "Roles": [
     {
      "Ref": "lambdacustomreslambdarole4DD61267"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "A2iProvisionStack/lambda-custom-res-lambda-role/DefaultPolicy/Resource"
   }
  },
  "provisionprovider74fb0D12FD8BC": {
   "Type": "Custom::AWS",
   "Properties": {
    "ServiceToken": {
     "Fn::GetAtt": [
      "AWS679f53fac002430cb0da5b7982bd22872D164C4C",
      "Arn"
     ]
    },
    "Create": {
     "Fn::Join": [
      "",
      [
       "{\"action\":\"invoke\",\"service\":\"Lambda\",\"parameters\":{\"FunctionName\":\"",
       {
        "Ref": "provisioncustomresource4A073CEE"
       },
       "\",\"InvocationType\":\"RequestResponse\",\"Payload\":\"{\\\"RequestType\\\": \\\"Create\\\"}\"},\"physicalResourceId\":{\"id\":\"Trigger\"}}"
      ]
     ]
    },
    "Delete": {
     "Fn::Join": [
      "",
      [
       "{\"action\":\"invoke\",\"service\":\"Lambda\",\"parameters\":{\"FunctionName\":\"",
       {
        "Ref": "provisioncustomresource4A073CEE"
       },
       "\",\"InvocationType\":\"RequestResponse\",\"Payload\":\"{\\\"RequestType\\\": \\\"Delete\\\"}\"},\"physicalResourceId\":{\"id\":\"Trigger\"}}"
      ]
     ]
    },
    "InstallLatestAwsSdk": false
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete",
   "Metadata": {
    "aws:cdk:path": "A2iProvisionStack/provision-provider-74fb0/Resource/Default"
   }
  },
  "AWS679f53fac002430cb0da5b7982bd22872D164C4C": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Code": {
     "S3Bucket": "cdk-hnb659fds-assets-122702569249-us-east-1",
     "S3Key": "6bbce4c77566d179835e0a6de3293a27d9021f2f49d0055bb8e465eb6e1d89b1.zip"
    },
    "Role": {
     "Fn::GetAtt": [
      "lambdacustomreslambdarole4DD61267",
      "Arn"
     ]
    },
    "Handler": "index.handler",
    "Runtime": "nodejs14.x",
    "Timeout": 120
   },
   "DependsOn": [
    "lambdacustomreslambdaroleDefaultPolicy3F0F5737",
    "lambdacustomreslambdarole4DD61267"
   ],
   "Metadata": {
    "aws:cdk:path": "A2iProvisionStack/AWS679f53fac002430cb0da5b7982bd2287/Resource",
    "aws:asset:path": "asset.6bbce4c77566d179835e0a6de3293a27d9021f2f49d0055bb8e465eb6e1d89b1",
    "aws:asset:is-bundled": false,
    "aws:asset:property": "Code"
   }
  },
  "AWS679f53fac002430cb0da5b7982bd2287LogRetentionCE72797A": {
   "Type": "Custom::LogRetention",
   "Properties": {
    "ServiceToken": {
     "Fn::GetAtt": [
      "LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aFD4BFC8A",
      "Arn"
     ]
    },
    "LogGroupName": {
     "Fn::Join": [
      "",
      [
       "/aws/lambda/",
       {
        "Ref": "AWS679f53fac002430cb0da5b7982bd22872D164C4C"
       }
      ]
     ]
    },
    "RetentionInDays": 7
   },
   "Metadata": {
    "aws:cdk:path": "A2iProvisionStack/AWS679f53fac002430cb0da5b7982bd2287/LogRetention/Resource"
   }
  },
  "LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aServiceRole9741ECFB": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "ManagedPolicyArns": [
     {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
       ]
      ]
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "A2iProvisionStack/LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8a/ServiceRole/Resource"
   }
  },
  "LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aServiceRoleDefaultPolicyADDA7DEB": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": [
        "logs:DeleteRetentionPolicy",
        "logs:PutRetentionPolicy"
       ],
       "Effect": "Allow",
       "Resource": "*"
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aServiceRoleDefaultPolicyADDA7DEB",
    "Roles": [
     {
      "Ref": "LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aServiceRole9741ECFB"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "A2iProvisionStack/LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8a/ServiceRole/DefaultPolicy/Resource"
   }
  },
  "LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aFD4BFC8A": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Handler": "index.handler",
    "Runtime": "nodejs14.x",
    "Code": {
     "S3Bucket": "cdk-hnb659fds-assets-122702569249-us-east-1",
     "S3Key": "eb5b005c858404ea0c8f68098ed5dcdf5340e02461f149751d10f59c210d5ef8.zip"
    },
    "Role": {
     "Fn::GetAtt": [
      "LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aServiceRole9741ECFB",
      "Arn"
     ]
    }
   },
   "DependsOn": [
    "LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aServiceRoleDefaultPolicyADDA7DEB",
    "LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aServiceRole9741ECFB"
   ],
   "Metadata": {
    "aws:cdk:path": "A2iProvisionStack/LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8a/Resource",
    "aws:asset:path": "asset.eb5b005c858404ea0c8f68098ed5dcdf5340e02461f149751d10f59c210d5ef8",
    "aws:asset:is-bundled": false,
    "aws:asset:property": "Code"
   }
  },
  "CDKMetadata": {
   "Type": "AWS::CDK::Metadata",
   "Properties": {
    "Analytics": "v2:deflate64:H4sIAAAAAAAA/11Py2rDMBD8ltzlLa4hOTeBngo1zgcYRdm4qvUo2hUhCP97JDn40NPMzsy+3mHfQruTd2rUdW6MvkA6s1SzON1cL4O0yBhE9sdEHaRjVDNyMV9shaMkXISR9nKVkEorBquJtHfiMzrFhWR542ftJoPsN2URWlpIgzdYghV7b7R61EsqWwR1oyRCJvgoIIyfCL78NOQr3TqmNCP5GBSKjdR0/mvKa4WKxN6O4WXmWXc6VW3L/y9v7jvyX+RF9A/+8e6tgwO0+90vad2EmFdbhGHFJ63RWANTAQAA"
   },
   "Metadata": {
    "aws:cdk:path": "A2iProvisionStack/CDKMetadata/Default"
   }
  }
 },
 "Outputs": {
  "CognitoUserPoolId": {
   "Value": {
    "Fn::Join": [
     "",
     {
      "Fn::Split": [
       "\"",
       {
        "Fn::GetAtt": [
         "provisionprovider74fb0D12FD8BC",
         "Payload"
        ]
       }
      ]
     }
    ]
   },
   "Export": {
    "Name": "CognitoUserPoolId"
   }
  },
  "ExportsOutputFnGetAttprovisionprovider74fb0D12FD8BCPayloadA976DCF4": {
   "Value": {
    "Fn::GetAtt": [
     "provisionprovider74fb0D12FD8BC",
     "Payload"
    ]
   },
   "Export": {
    "Name": "A2iProvisionStack:ExportsOutputFnGetAttprovisionprovider74fb0D12FD8BCPayloadA976DCF4"
   }
  }
 },
 "Rules": {
  "CheckBootstrapVersion": {
   "Assertions": [
    {
     "Assert": {
      "Fn::Not": [
       {
        "Fn::Contains": [
         [
          "1",
          "2",
          "3",
          "4",
          "5"
         ],
         {
          "Ref": "BootstrapVersion"
         }
        ]
       }
      ]
     },
     "AssertDescription": "CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI."
    }
   ]
  }
 }
}